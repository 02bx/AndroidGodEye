apply plugin: 'maven'
apply plugin: 'signing'

def isReleaseBuild() {
    return getVersionName().contains("SNAPSHOT") == false
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUsername() {
    String userName = ""
    if (hasProperty('SONATYPE_NEXUS_USERNAME')) {
        userName = SONATYPE_NEXUS_USERNAME;
    } else {
        File localProperties = project.rootProject.file('local.properties');
        if (localProperties.exists()) {
            InputStream inputStream = localProperties.newDataInputStream()
            Properties properties = new Properties()
            properties.load(inputStream)
            userName = properties.getProperty('SONATYPE_NEXUS_USERNAME')
        }
    }
    print "SONATYPE_NEXUS_USERNAME:" + userName
    return userName;
}

def getRepositoryPassword() {
    String pwd = ""
    if (hasProperty('SONATYPE_NEXUS_PASSWORD')) {
        pwd = SONATYPE_NEXUS_PASSWORD;
    } else {
        File localProperties = project.rootProject.file('local.properties');
        if (localProperties.exists()) {
            InputStream inputStream = localProperties.newDataInputStream()
            Properties properties = new Properties()
            properties.load(inputStream)
            pwd = properties.getProperty('SONATYPE_NEXUS_PASSWORD')
        }
    }
    print "SONATYPE_NEXUS_PASSWORD:" + pwd
    return pwd;
}

def getVersionName() {
    File versionFile = project.rootProject.file('VERSION');
    String versionName;
    if (versionFile.exists()) {
        InputStream inputStream = versionFile.newDataInputStream()
        Properties properties = new Properties()
        properties.load(inputStream)
        versionName = properties.getProperty('VERSION_NAME')
    }
    if (versionName == null || versionName.length() == 0) {
        print "can not find version name! if local build ,ignore this waring."
        versionName = ""
    }
    return versionName
}

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                pom.groupId = GROUP
                pom.artifactId = POM_ARTIFACT_ID
                pom.version = getVersionName()

                repository(url: getReleaseRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }
                snapshotRepository(url: getSnapshotRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }

                pom.project {
                    name POM_NAME
                    packaging POM_PACKAGING
                    description POM_DESCRIPTION
                    url POM_URL

                    scm {
                        url POM_SCM_URL
                        connection POM_SCM_CONNECTION
                        developerConnection POM_SCM_DEV_CONNECTION
                    }

                    licenses {
                        license {
                            name POM_LICENCE_NAME
                            url POM_LICENCE_URL
                            distribution POM_LICENCE_DIST
                        }
                    }

                    developers {
                        developer {
                            id POM_DEVELOPER_ID
                            name POM_DEVELOPER_NAME
                        }
                    }
                }

            }
        }
    }

    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    def plugins = project.getPlugins()
    if (plugins.hasPlugin('com.android.application') || plugins.hasPlugin('com.android.library')) {
        task androidJavadocs(type: Javadoc) {
            source = android.sourceSets.main.java.srcDirs
            classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        }

        task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
            classifier = 'javadoc'
            from androidJavadocs.destinationDir
        }

        task androidSourcesJar(type: Jar) {
            classifier = 'sources'
            from android.sourceSets.main.java.sourceFiles
        }

        artifacts {
            archives androidSourcesJar
            archives androidJavadocsJar
        }
    } else {
        task sourcesJar(type: Jar, dependsOn: classes) {
            classifier = 'sources'
            from sourceSets.main.allSource
        }

        task javadocsJar(type: Jar, dependsOn: javadoc) {
            classifier = 'javadoc'
            from javadoc.destinationDir
        }

        artifacts {
            archives sourcesJar
            archives javadocsJar
        }
    }

    if (JavaVersion.current().isJava8Compatible()) {
        allprojects {
            tasks.withType(Javadoc) {
                options.addStringOption('Xdoclint:none', '-quiet')
            }
        }
    }
}
